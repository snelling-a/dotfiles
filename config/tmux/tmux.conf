set -g default-shell /usr/local/bin/bash
# {n}vim compability
set-option default-terminal "tmux-256color"

set-option -gas terminal-overrides "*:Tc" # true color support
set-option -gas terminal-overrides "*:RGB" # true color support
set -as terminal-overrides ',*:Smulx=\E[4::%p1%dm'  # undercurl support
set -as terminal-overrides ',*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'  # underscore colours - needs tmux-3.0

set-option -sg escape-time 10

set -g mouse on

set -g history-limit 1000000

setw -g word-separators ' @"=()[]_-:,.' # word separators for automatic word selection

setw -ag word-separators "'"

set -g focus-events on # Focus events enabled for terminals that support them
set -g bell-action none # No bells at all
setw -g monitor-activity on # Activity monitoring
set -g visual-activity on

# STATUS LINE ----------------------------------------------------------------------------------{{{
set -g status on
set -g status-interval 1 # Refresh 'status-left' and 'status-right' more often
setw -q -g utf8 on

# If running inside tmux ($TMUX is set), then change the status line to red
%if #{TMUX}
set -g status-bg red
%endif

set -g display-time 4000 # Increase tmux messages display duration from 750ms to 4s

# }}}

# WINDOWS/PANES -------------------------------------------------------------------------------{{{
set -g base-index 1           # start windows numbering at 1
setw -g pane-base-index 1     # make pane numbering consistent with windows

setw -g aggressive-resize on

set-window-option -g automatic-rename # auto window rename
set-option -g renumber-windows on # automatically renumber windows

bind C command-prompt -p "Name of new window: " "new-window -n '%%' -c '#{pane_current_path}'"
bind C-c command-prompt -p "Name of new window: " "new-window -n '%%' -c '#{pane_current_path}'"

# fix pane_current_path on new window and splits
if-shell "test '#{$TMUX_VERSION_MAJOR} -gt 1 -o \( #{$TMUX_VERSION_MAJOR} -eq 1 -a #{$TMUX_VERSION_MINOR} -ge 8 \)'" 'unbind c; bind c new-window -c "#{pane_current_path}"'
if-shell "test '#{$TMUX_VERSION_MAJOR} -gt 1 -o \( #{$TMUX_VERSION_MAJOR} -eq 1 -a #{$TMUX_VERSION_MINOR} -ge 8 \)'" "unbind '\"'; bind '\"' split-window -v -c '#{pane_current_path}'"
if-shell "test '#{$TMUX_VERSION_MAJOR} -gt 1 -o \( #{$TMUX_VERSION_MAJOR} -eq 1 -a #{$TMUX_VERSION_MINOR} -ge 8 \)'" 'unbind v; bind v split-window -h -c "#{pane_current_path}"'
if-shell "test '#{$TMUX_VERSION_MAJOR} -gt 1 -o \( #{$TMUX_VERSION_MAJOR} -eq 1 -a #{$TMUX_VERSION_MINOR} -ge 8 \)'" 'unbind "%"; bind % split-window -h -c "#{pane_current_path}"'

# set window split
bind-key v split-window -h -l 100 -c '#{pane_current_path}'
bind-key s split-window -v -l 30 -c '#{pane_current_path}'

# pane movement
bind-key J command-prompt -p "Join pane from:"  "join-pane -s '%%'"
bind-key S command-prompt -p "Send pane to:"  "join-pane -t '%%'"

# hjkl pane traversal
bind -r h select-pane -L  # move left
bind -r j select-pane -D  # move down
bind -r k select-pane -U  # move up
bind -r l select-pane -R  # move right

# pane resizing
bind -r H resize-pane -L 2
bind -r J resize-pane -D 2
bind -r K resize-pane -U 2
bind -r L resize-pane -R 2

# window navigation
unbind n
unbind p
bind p previous-window # select previous window
bind n next-window     # select next window
bind Tab last-window        # move to last active window

# }}}

# BUFFERS --------------------------------------------------------------------------------------{{{
# bind b list-buffers     # list paste buffers
# bind p paste-buffer -p  # paste from the top paste buffer
# bind P choose-buffer    # choose which buffer to paste from

# # }}}

# KEYBINDINGS ----------------------------------------------------------------------------------{{{
set -g prefix C-a # Change the prefix key to C-a

unbind C-b
bind C-a send-prefix
bind-key a send-prefix # Allows using C-a a <command> to send commands to a TMUX session inside another TMUX session

# Vi copypaste mode ----------------------------------------------------------------------------{{{
set-window-option -g mode-keys vi
if-shell "test '\( #{$TMUX_VERSION_MAJOR} -eq 2 -a #{$TMUX_VERSION_MINOR} -ge 4 \)'" 'bind-key -Tcopy-mode-vi v send -X begin-selection; bind-key -Tcopy-mode-vi y send -X copy-selection-and-cancel'
if-shell '\( #{$TMUX_VERSION_MAJOR} -eq 2 -a #{$TMUX_VERSION_MINOR} -lt 4\) -o #{$TMUX_VERSION_MAJOR} -le 1' 'bind-key -t vi-copy v begin-selection; bind-key -t vi-copy y copy-selection'

# Update default binding of `Enter` and `Space to also use copy-pipe
unbind -T copy-mode-vi Enter
unbind -T copy-mode-vi Space

bind-key -T edit-mode-vi Up send-keys -X history-up
bind-key -T edit-mode-vi Down send-keys -X history-down

bind-key -T copy-mode-vi 'v' send-keys -X begin-selection # setup 'v' to begin selection as in Vim

bind-key -T copy-mode-vi 'y' send -X copy-selection-and-cancel # copy text with `y` in copy mode

bind-key -T copy-mode-vi MouseDragEnd1Pane send -X copy-selection-and-cancel # copy text with mouse selection without pressing any key

# }}}

set -g status-keys emacs # emacs key bindings in tmux command prompt (prefix + :) are better

# Keys to toggle monitoring activity in a window and the synchronize-panes option
bind m set monitor-activity
bind y set synchronize-panes\; display 'synchronize-panes #{?synchronize-panes,on,off}'

bind -n C-l send-keys C-l \; run 'sleep 0.2' \; clear-history # clear both screen and history

bind e new-window -n "TMUX_CONF" sh -c '${EDITOR:-vim} ~/.config/tmux/tmux.conf && tmux source ~/.config/tmux/tmux.conf && tmux display "Config reloaded..."' # edit configuration
bind R source-file ~/.config/tmux/tmux.conf \; display-message "Config reloaded..." # Source .tmux.conf as suggested in `man tmux`

# }}}

source $HOME/.config/tmux/theme.conf
