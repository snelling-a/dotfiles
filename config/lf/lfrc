#!/usr/bin/env bash
# shellcheck disable=all

set shellopts '-eu'

set dircounts
set dirpreviews
set drawbox
set hidden
set icons
set ifs "\n"
set incfilter
set incsearch
set info "size"
set number
set previewer ~/.config/lf/pv.sh
set relativenumber
set scrolloff 10
set sixel

set promptfmt "\033[34;1m%d\033[0m\033[1m%f\033[0m"
set truncatechar â€¦

cmd open ${{
case $(file --mime-type --dereference --brief $f) in
    text/*) nvim $fx;;
    application/json) nvim $fx;;
    *) for f in $fx; do open $f > /dev/null 2> /dev/null & done;;
esac
}}

cmd extract ${{
set -f
case $f in
    *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
    *.tar.gz|*.tgz) tar xzvf $f;;
    *.tar.xz|*.txz) tar xJvf $f;;
    *.zip) unzip $f;;
    *.rar) unrar x $f;;
    *.7z) 7z x $f;;
esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
set -f
mkdir $1
cp -r $fx $1
tar czf $1.tar.gz $1
rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
set -f
mkdir $1
cp -r $fx $1
zip -r $1.zip $1
rm -rf $1
}}

cmd openShell ${{
$SHELL
}}

cmd delete ${{
set -f
printf "$fx\n"
printf "delete?[y/n]"
read ans
[ $ans = "y" ] && trash $fx
}}

cmd mkdir %{{
[[ -n "${1}" ]] && command mkdir -pv -- "${@}"
}}

cmd mkfile ${{
touch $1
}}

cmd z ${{
result="$(zoxide query --exclude $PWD $@)"
lf -remote "send $id cd $result"
}}

cmd zi ${{
result="$(zoxide query -i)"
lf -remote "send $id cd $result"
}}

cmd fzf_jump ${{
res="$(fd | fzf --reverse --header='Jump to location' | sed 's/\\/\\\\/g;s/"/\\"/g')"
if [ -d "$res" ] ; then
    cmd="cd"
elif [ -f "$res" ] ; then
    cmd="select"
else
    exit 0
fi
lf -remote "send $id $cmd \"$res\""
}}

cmd fzf_search ${{
res="$( \
    RG_PREFIX="rg --column --line-number --no-heading  --color=always  --smart-case "
    FZF_DEFAULT_COMMAND="$RG_PREFIX ''" \
        fzf \
        --bind "change:reload:$RG_PREFIX {q} || true" \
        --ansi\
        --layout=reverse \
        --header 'Search in files' \
        | cut -d':' -f1
            )"
            [ ! -z "$res" ] && lf -remote "send $id select \"$res\""
        }}

# Create a folder & cd into it
cmd mkcd %{{
command mkdir -p -- "${@}" && lf -remote "send $id cd \"$@\""
}}

map ,
map c
map d
map e
map i
map m
map p
map r
map w
map y

cmap <a-,>  cmd-menu-complete-back
cmap <a-.>  cmd-menu-complete
cmap <a-b> cmd-word-back
cmap <a-f> cmd-word
cmap <a-i> cmd-word
cmap <a-o> cmd-word-back
cmap <c-c>  cmd-interrupt
cmap <c-j>  cmd-history-next
cmap <c-k>  cmd-history-prev
cmap <down> cmd-history-next
cmap <esc>  cmd-escape
cmap <tab>  cmd-complete
cmap <up>   cmd-history-prev
map ,F setfilter
map ,f filter
map . set hidden!
map <a-i> :{{ clear; unselect; }}
map <c-p> :fzf_jump
map <c-r> :fzf_search
map <enter> open
map <f-2> rename
map <tab> :toggle; down
map A push <f-2><end>
map Ee $sudo -A nvim "$f"
map Ev $vim "$f"
map I push <f-2><home>
map S openShell
map X !$f
map ZZ quit
map aa push <f-2><end><a-b>
map cmp tar
map cn push <f-2><end><c-u>
map dD delete
map dd push :cut<enter>
map eZ $$EDITOR $HOME/.zshenv
map ee $$EDITOR "$f"
map ext extract
map ez $$EDITOR $HOME/.zshrc
map fF setfilter
map ff filter
map gst $lazygit
map i $~/.config/lf/pv.sh "$f" | less -R
map md push :mkdir<space>
map mf push :mkfile<space>
map mt push :mkcd<space>
map pp push :paste<enter>
map x $$f
map yd !printf $PWD | pbcopy
map yn !printf $f | xargs basename | pbcopy
map yp !printf $f | pbcopy
map yy push :copy<enter>

map gf ${{
# git onefetch
clear -x; onefetch | bat --paging=always --style=plain
}}
