#!/bin/bash
# Append Jira tag or conventional commit type if branch has one in it

COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2
# SHA1=$3

# exit if commit is a fixup
grep -q 'fixup' "$COMMIT_MSG_FILE" && exit 0

# get current branch
branch_name=$(git rev-parse --abbrev-ref HEAD)

# check that branch has jira id and title; i.e. "feature/ABC-123-description"
jira_tag_id=$(echo "$branch_name" | sed -nr 's,[a-z]*/?([A-Z0-9]+-[0-9]+)-.+,\1,p')

if [[ -n "$jira_tag_id" ]]; then
	# exit if jira_tag_id is found already in the commit message
	grep -q "^$jira_tag_id:" "$COMMIT_MSG_FILE" && exit 0

	printf "\n󰌃 Prepending Jira issue id to commit message...\n\n"

	# check  if commit was initiated with editor/template
	if [[ "$COMMIT_SOURCE" == "template" ]]; then
		command="0,/^$/{s/^$/$jira_tag_id: /}"
	else
		# ...or with -m flag
		command="1s/^/$jira_tag_id: /"
	fi

	# if command is set, prepend jira issue id to the commit message
	[[ -n $command ]] && sed -i.bak -e "$command" "$COMMIT_MSG_FILE"

	return
fi

conventional_commit_types=(
	"build"
	"chore"
	"ci"
	"docs"
	"feat"
	"fix"
	"perf"
	"refactor"
	"revert"
	"style"
	"test"
)

# check if branch has conventional commit type before /
branch_slug=$(echo "$branch_name" | sed -nr 's,([a-z]+)/?.+,\1,p')

# check if branch_slug is in conventional_commit_types array
if [[ " ${conventional_commit_types[*]} " == *" $branch_slug "* ]]; then
	conventional_commit_type=$branch_slug
fi

if [[ -n "$conventional_commit_type" ]]; then
	# exit if conventional_commit_type is found already in the commit message
	for type in "${conventional_commit_types[@]}"; do
		grep -q "^$type\((\w\+)\)\?:" "$COMMIT_MSG_FILE" && exit 0
	done

	printf "\n Prepending conventional commit type to commit message...\n\n"

	# check if commit was initiated with editor/template
	if [[ "$COMMIT_SOURCE" == "template" ]]; then
		command="0,/^$/{s/^$/$conventional_commit_type: /}"
	else
		# ...or with -m flag
		command="1s/^/$conventional_commit_type: /"
	fi

	# if command is set, prepend conventional commit type to the commit message
	[[ -n $command ]] && sed -i.bak -e "$command" "$COMMIT_MSG_FILE"
fi
